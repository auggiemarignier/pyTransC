[project]
name = "pytransc"
version = "0.1.0"
description = "Python library for implementing TransC MCMC sampling"
readme = "README.md"
authors = [
    { name = "Malcolm Sambridge", email = "malcolm.sambridge@anu.edu.au" },
    { name = "Juerg Hauser", email = "Juerg.Hauser@csiro.au" },
    { name = "Auggie Marignier", email = "auggie.marignier@ox.ac.uk" },
]
requires-python = ">=3.9"
dependencies = [
    "arviz>=0.16.0",
    "corner>=2.2.3",
    "emcee>=3.1.6",
    "matplotlib>=3.9.4",
    "numdifftools>=0.9.41",
    "numpy>=2.0.2",
    "scikit-learn>=1.6.1",
    "scipy>=1.13.1",
    "tqdm>=4.67.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
notebooks = [
    "jupyterlab>=4.4.4",
]

[tool.ruff.lint]
select = [
    "B007",    # Loop control variable {name} not used within loop body
    "B014",    # Exception handler with duplicate exception
    "C",       # complexity
    "D",       # docstrings
    "E",       # pycodestyle
    "F",       # pyflakes/autoflake
    "I",       # format imports
    "ICN001",  # import conventions; {name} should be imported as {asname}
    "PGH004",  # Use specific rule codes when using noqa
    "PLC0414", # Useless import alias. Import alias does not rename original package.
    "SIM105",  # Use contextlib.suppress({exception}) instead of try-except-pass
    "SIM117",  # Merge with-statements that use the same scope
    "SIM118",  # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM201",  # Use {left} != {right} instead of not {left} == {right}
    "SIM212",  # Use {a} if {a} else {b} instead of {b} if not {a} else {a}
    "SIM300",  # Yoda conditions. Use 'age == 42' instead of '42 == age'.
    "SIM401",  # Use get from dict with default instead of an if block
    "TRY004",  # Prefer TypeError exception for invalid type
    "RUF006",  # Store a reference to the return value of asyncio.create_task
    "UP",      # pyupgrade
    "W",       # pycodestyle
    "NPY",     # NumPy
    "PT001",   # @pytest.fixture() decorators with or without parentheses, depending on the lint.flake8-pytest-style.fixture-parentheses setting
]
ignore = [
    "D202",  # No blank lines allowed after function docstring
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
    "D401",  # First line should be in imperative mood
    "D404",  # First word of the docstring should not be This
    "D406",  # Section name should end with a newline
    "D407",  # Section name underlining
    "D411",  # Missing blank line before section
    "E501",  # line too long
    "E731",  # do not assign a lambda expression, use a def
]
[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.mccabe]
max-complexity = 25

[tool.ruff.lint.pydocstyle]
convention = "numpy"
